#!/usr/bin/env bin/zopepy

from threading import Thread
from time import sleep
from urlparse import urlparse
from xmlrpclib import ServerProxy
import os
import signal
import socket
import subprocess
import sys


ZSERVER_PORT = os.environ.get('ZSERVER_PORT', '19900')
TESTSERVER_CTL_PORT = os.environ.get('PORT1', '19901')
SOLR_PORT = os.environ.get('SOLR_PORT', '19902')


class TestserverDaemon(object):
    """Manages the testerver when run on jenkins.
    """

    def __init__(self):
        self.plone_url = None
        self.xmlrpc_url = None

    def start_testserver(self):
        """Start the testserver in a subprocess controlled by a separate thread.
        """

        assert not self.plone_url
        assert not self.xmlrpc_url

        env = os.environ.copy()
        env['PYTHONUNBUFFERED'] = 'true'
        env['BUILDOUT_DIR'] = os.getcwd()

        args = ['bin/testserver']
        print(' '.join(['>'] + args))
        self.testserver_process = subprocess.Popen(args, stdout=subprocess.PIPE, env=env)

        def run_and_observe_process():
            while True:
                rc = self.testserver_process.poll()
                if rc is not None:
                    return rc

                line = self.testserver_process.stdout.readline().decode('utf-8')
                sys.stdout.write(line)
                if not self.plone_url and line.startswith('ZSERVER: '):
                    self.plone_url = '{}/plone/'.format(line[len('ZSERVER: '):].strip())
                if not self.xmlrpc_url and line.startswith('XMLRPC: '):
                    self.xmlrpc_url = line[len('XMLRPC: '):].strip()
                    os.environ['TESTSERVER_CTL_PORT'] = str(urlparse(self.xmlrpc_url).port)

        self.testserver_thread = Thread(target=run_and_observe_process)
        self.testserver_thread.start()

    def wait_for_testserver(self):
        """Block until the testserver is ready.
        """
        timeout_seconds = 60 * 5
        interval = 0.1
        steps = timeout_seconds / interval

        # Wait for urls to be appear. The urls are set from the thread watching
        # the bin/testserver subprocess.
        for num in range(int(steps)):
            if self.xmlrpc_url and self.plone_url:
                break
            if num > 300 and num % 300 == 0:
                print('... waiting for testserver to be ready ')
            sleep(interval)

        # A soon as the URLs appear we can setup the XMLRPC proxy.
        self.controller_proxy = ServerProxy(self.xmlrpc_url)

        # Now wait until the server is actually ready.
        for num in range(int(steps)):
            if self.is_controller_server_ready():
                return
            if num > 300 and num % 300 == 0:
                print('... waiting for testserver to be ready ')
            sleep(interval)

        self.stop_testserver()
        raise Exception('Timeout: testserver did not start in {} seconds'.format(timeout_seconds))

    def stop_testserver(self):
        """Kill the testserver process group.
        It should be killed as group since bin/testserver is a wrapper script,
        creating a subprocess.
        """
        try:
            os.kill(self.testserver_process.pid, signal.SIGINT)
        except KeyboardInterrupt:
            pass
        except OSError as exc:
            if exc.strerror != 'No such process':
                raise
        self.testserver_thread.join()
        self.plone_url = None
        self.xmlrpc_url = None

    def is_controller_server_ready(self):
        """Test whether the controller server is available.
        This indicates that the testserver is ready.
        """
        try:
            self.controller_proxy.listMethods()
        except socket.error:
            return False
        except Exception:
            pass
        return True


testserver = TestserverDaemon()
testserver.start_testserver()
try:
    testserver.wait_for_testserver()
    env = os.environ.copy()
    env['TESTSERVER_PLONE_URL'] = testserver.plone_url
    env['TESTSERVER_XMLRPC_URL'] = testserver.xmlrpc_url
    result = subprocess.call('tox', env=env)
finally:
    testserver.stop_testserver()

sys.exit(result)
